// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fxc6NpQwa2SYbt83m/8EAAD///NUv55kKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
